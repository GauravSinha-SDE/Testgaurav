Perfect ðŸ‘Œ thanks for sharing the exact structures!
Youâ€™ve already defined **physical dimension tables** and **fact views** that consume them â€” this matches a clean **SCD Type 1 star schema** approach.

Let me refine and complete this setup for you:

---

### âœ… Dimension Tables (SCD1 overwrite)

You already have:

**1. Supplier Site Profile**

```sql
CREATE OR REPLACE TABLE DW.T_DIM_ETQ_SUPPLIER_SITE_PROFILE_DEF (
    Supplier_Site_Profile_Key BIGINT AUTOINCREMENT PRIMARY KEY, -- surrogate key
    ETQ_SSP_ID                VARCHAR(50) NOT NULL,  -- business key
    ETQ_SSP_NAME_ID           VARCHAR(255),
    EIQ_RISK_SCORE            DECIMAL(10,2),
    SAP_VENDORNAME_ID         VARCHAR(50),  -- FK to Vendor (business key)
    ETQ_APPROVAL_STATUS       VARCHAR(50),
    SITE_OVERALL_RISK         VARCHAR(50),
    EMPLOYEE_COUNT            INT,
    CREATED_DATE              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LAST_UPDATED_DATE         TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

**2. ECM Vendor**

```sql
CREATE OR REPLACE TABLE DW.T_DIM_ECM_VENDOR_DEF (
    SAP_Vendor_Key            BIGINT AUTOINCREMENT PRIMARY KEY, -- surrogate key
    SAP_Vendor_ID             VARCHAR(50) NOT NULL, -- business key
    REGION_CODE               VARCHAR(50),
    SAP_Vendor_Name           VARCHAR(255),
    Parent_Vendor_Code        VARCHAR(50),
    Parent_Vendor_Name        VARCHAR(255),
    ECM_Product_Category      VARCHAR(255),
    CREATED_DATE              TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LAST_UPDATED_DATE         TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

### âœ… Dimension Views (expose user-friendly version)

These are optional but very useful to abstract surrogate keys.

**Supplier Site Profile View**

```sql
CREATE OR REPLACE VIEW DW.V_DIM_ETQ_SUPPLIER_SITE_PROFILE AS
SELECT 
    Supplier_Site_Profile_Key,
    ETQ_SSP_ID,
    ETQ_SSP_NAME_ID,
    EIQ_RISK_SCORE,
    SAP_VENDORNAME_ID,
    ETQ_APPROVAL_STATUS,
    SITE_OVERALL_RISK,
    EMPLOYEE_COUNT
FROM DW.T_DIM_ETQ_SUPPLIER_SITE_PROFILE_DEF;
```

**ECM Vendor View**

```sql
CREATE OR REPLACE VIEW DW.V_DIM_ECM_VENDOR AS
SELECT 
    SAP_Vendor_Key,
    SAP_Vendor_ID,
    REGION_CODE,
    SAP_Vendor_Name,
    Parent_Vendor_Code,
    Parent_Vendor_Name,
    ECM_Product_Category
FROM DW.T_DIM_ECM_VENDOR_DEF;
```

---

### âœ… Fact Views (already good â€” just polishing)

**3. Social Compliance Due Diligence**

```sql
CREATE OR REPLACE VIEW DW.V_FACT_ECM_SOC_COMPL_DUE_DILIGENCE_EVENT AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY scd.EVENT_ID) AS Fact_ID,
    ssp.Supplier_Site_Profile_Key,
    v.SAP_Vendor_Key,
    scd.AUDIT_RENEWAL_DATE,
    scd.SUB_EVENT_SEQUENCE_NUMBER,
    scd.SUB_EVENT_TYPE,
    scd.AUDITOR,
    scd.ASSESSMENT_PROTOCOL,
    scd.DUE_DILIGENCE_REQUESTER,
    scd.DUE_DILIGENCE_TYPE,
    scd.AUDIT_RENEWAL_EXECUTION_STATUS,
    scd.DUE_DILIGENCE_REQUESTED_DATE,
    scd.CUSTOMER_DEADLINE_DATE,
    scd.DUE_DILIGENCE_DATE,
    scd.FINAL_DD_COMPLETION_DATE,
    scd.ZERO_TOLERANCE_FINDINGS_COUNT,
    scd.CRITICAL_FINDINGS_COUNT,
    scd.MAJOR_1_FINDINGS_COUNT,
    scd.MINOR_FINDINGS_COUNT,
    scd.TOTAL_MAJOR_FINDINGS_COUNT,
    scd.TOTAL_MINOR_FINDINGS_COUNT
FROM MDS.STAGING.T_ECM_SOCIAL_COMPLIANCE_DUE_DILIGENCE scd
JOIN DW.T_DIM_ETQ_SUPPLIER_SITE_PROFILE_DEF ssp
    ON scd.ETQ_SSP_NAME_ID = ssp.ETQ_SSP_NAME_ID
JOIN DW.T_DIM_ECM_VENDOR_DEF v
    ON ssp.SAP_VENDORNAME_ID = v.SAP_Vendor_ID;
```

**4. Spend Fact**

```sql
CREATE OR REPLACE VIEW DW.V_FACT_PO_SPEND AS
SELECT 
    ROW_NUMBER() OVER (ORDER BY p.SAP_VENDOR_ID, p.SKU_ID, p.Date) AS Fact_ID,
    v.SAP_Vendor_Key,
    p.Date AS Spend_Date,
    p.SKU_ID,
    p.Spend_in_Dollars
FROM MDS.STAGING.T_PO_SPEND p
JOIN DW.T_DIM_ECM_VENDOR_DEF v
    ON p.SAP_VENDOR_ID = v.SAP_Vendor_ID;
```

---

### ðŸ”‘ Notes

* **SCD1 logic** â†’ When reloading dimensions, overwrite attribute values (e.g., vendor name change just updates the row).
* **Surrogate keys** (autoincrement) provide stability in fact joins even if business keys change.
* **Views** â†’ Insulate users from surrogate key complexity, while still letting facts join cleanly to dimensions.

---

ðŸ‘‰ Do you also want me to give you the **MERGE (upsert) SQL** for populating these dimension tables with SCD1 logic from staging? That way, every ETL load will keep your dims fresh.
