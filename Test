

select * from 
(
WITH SHIFT_PARAMS AS (
  SELECT  PA_FROM AS LGNUM,
      SRC_SYS,
      PA_TO AS SHIFT_START_RAW,
      ZCOMMENT AS TIMEZONE
  FROM SC_MD.INT_SC_MD.T_SC_PARAMETERS
  WHERE PROCESS = 'WMS' AND CATE = 'SHIFT_HR'
),
INDIRECT_PARAMS AS (
  SELECT PA_FROM AS LGNUM, SRC_SYS, PA_TO::INT AS MAX_TASK_DURATION
  FROM SC_MD.INT_SC_MD.T_SC_PARAMETERS
  WHERE PROCESS = 'WMS' AND CATE = 'IND_TIME'
),
TIMEZONE_PARAMS AS (
  SELECT PA_FROM AS LGNUM, SRC_SYS, ZCOMMENT
  FROM SC_MD.INT_SC_MD.T_SC_PARAMETERS
  WHERE PROCESS = 'WMS' AND CATE = 'SHIFT_HR'
),
BASE AS (
  SELECT 
    'NA' AS CC_SOURCE_SYSTEM,
    LGNUM, TANUM, PROCTY, TRART, DOCCAT, REASON,
    GUID_STOCK, LETYP, VLTYP, SLOC_TYPE, VLPLA,
    NLTYP, DLOC_TYPE, NLPLA, VLENR, NLENR,
    MATID, MEINS, WHO, QUEUE, EXCCODE, CONFIRMED_BY,
    CREATED_AT, STARTED_AT, CONFIRMED_AT, CONFIRMED_AT_WH,
    NISTM
  FROM EWM_S4_NA_PROD_DATASHARE.STAGING."/SCWM/ORDIM_C"
  WHERE TOSTAT = 'C' AND TRART IN (1,2,3,4)
),
TRANSFORMED AS (
  SELECT
    R.*,
    TZ.ZCOMMENT,
    CASE
      WHEN R.PROCTY = '3030' THEN 'REPLENISHMENT'
      WHEN R.PROCTY LIKE '1%' THEN 'INBOUND'
      WHEN R.PROCTY LIKE '2%' THEN 'OUTBOUND'
      ELSE 'OTHERS'
    END AS DIRECTION,
    TRY_TO_DATE(LEFT(R.CREATED_AT,8),'YYYYMMDD') AS CREATED_DATE,
    TRY_TO_DATE(LEFT(R.STARTED_AT,8),'YYYYMMDD') AS STARTED_DATE,
    TRY_TO_DATE(LEFT(R.CONFIRMED_AT,8),'YYYYMMDD') AS CONFIRMED_DATE,
    TRY_TO_DATE(LEFT(R.CONFIRMED_AT_WH,8),'YYYYMMDD') AS CONFIRMED_DATE_WH,
    TRY_TO_TIMESTAMP(TO_VARCHAR(R.CONFIRMED_AT_WH),'YYYYMMDDHH24MISS') AS CONFIRMED_AT_TS,
    CONVERT_TIMEZONE('UTC', TZ.ZCOMMENT,
      TRY_TO_TIMESTAMP(TO_VARCHAR(R.STARTED_AT),'YYYYMMDDHH24MISS')
    ) AS STARTED_AT_TS,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CC_UPDATED_DATETIMESTAMP,
    SUM(R.NISTM) OVER (PARTITION BY R.TANUM) AS ACTUAL_QUANTITY
  FROM BASE R
  JOIN TIMEZONE_PARAMS TZ
    ON R.LGNUM = TZ.LGNUM AND R.CC_SOURCE_SYSTEM = TZ.SRC_SYS
),
SHIFT_CANDIDATES AS (
  SELECT 
    T.*, 
    S.SHIFT_START_RAW,
    DATEADD(HOUR, 12,
      TO_TIMESTAMP(
        TO_CHAR(DATEADD(DAY, d.offset, T.CONFIRMED_DATE_WH), 'YYYY-MM-DD') || ' ' || S.SHIFT_START_RAW,
        'YYYY-MM-DD HH24:MI'
      )
    ) AS SHIFT_END_TS,
    TO_TIMESTAMP(
      TO_CHAR(DATEADD(DAY, d.offset, T.CONFIRMED_DATE_WH), 'YYYY-MM-DD') || ' ' || S.SHIFT_START_RAW,
      'YYYY-MM-DD HH24:MI'
    ) AS SHIFT_START_TS,
    ABS(DATEDIFF(MINUTE, T.CONFIRMED_AT_TS,
      TO_TIMESTAMP(
        TO_CHAR(DATEADD(DAY, d.offset, T.CONFIRMED_DATE_WH), 'YYYY-MM-DD') || ' ' || S.SHIFT_START_RAW,
        'YYYY-MM-DD HH24:MI'
      )
    )) AS SHIFT_DIFF_MIN
  FROM TRANSFORMED T
  JOIN SHIFT_PARAMS S
    ON T.LGNUM = S.LGNUM AND T.CC_SOURCE_SYSTEM = S.SRC_SYS
  CROSS JOIN (
SELECT -1 AS offset UNION ALL SELECT 0 UNION ALL SELECT 1
    --SELECT 0 AS offset
  ) d
),
CLOSEST_SHIFT AS (
  SELECT *
  FROM (
    SELECT *,
    CASE 
        WHEN CONFIRMED_AT_TS BETWEEN DATEADD(MINUTE,-60,SHIFT_START_TS) AND SHIFT_END_TS THEN 1
        WHEN CONFIRMED_AT_TS BETWEEN SHIFT_START_TS AND SHIFT_END_TS THEN 2
        ELSE 3
           END AS PRIORITY,
--        if ((CONFIRMED_AT_TS BETWEEN DATEADD(MINUTE,-60,SHIFT_START_TS) AND SHIFT_END_TS),1,if(CONFIRMED_AT_TS BETWEEN SHIFT_START_TS AND SHIFT_END_TS ,2,3)) as PRIORITY,
      ROW_NUMBER() OVER (
        PARTITION BY LGNUM, TANUM, CONFIRMED_AT_TS
        ORDER BY 
         CASE 
        WHEN CONFIRMED_AT_TS BETWEEN DATEADD(MINUTE,-60,SHIFT_START_TS) AND SHIFT_END_TS THEN 1
        WHEN CONFIRMED_AT_TS BETWEEN SHIFT_START_TS AND SHIFT_END_TS THEN 2
            ELSE 3
        END,
        SHIFT_DIFF_MIN,
        SHIFT_START_TS
      ) AS RN,
    FROM SHIFT_CANDIDATES
  ) AS ranked
  WHERE RN = 1
)
,
ONE_SHIFT_PER_OPERATOR AS
(
SELECT
LGNUM,
CONFIRMED_BY,
DATE(CONFIRMED_AT_TS) AS WORK_DAY,
SHIFT_START_TS,
SHIFT_END_TS,
CONCAT(LGNUM, '-', CONFIRMED_BY, '-', TO_CHAR(SHIFT_START_TS, 'YYYY-MM-DD"T"HH24:MI')) AS SHIFT_SESSION_ID,
ROW_NUMBER() OVER (
        PARTITION BY LGNUM, CONFIRMED_BY, DATE(SHIFT_START_TS)
        ORDER BY PRIORITY, SHIFT_DIFF_MIN
)AS SHIFT_CHOICE_RN
FROM CLOSEST_SHIFT
),
SELECTED_OPERATOR_SHIFTS
AS
(
SELECT * FROM ONE_SHIFT_PER_OPERATOR WHERE SHIFT_CHOICE_RN = 1
),
UNIFIED_SHIFT_ASSIGNMENT
AS
(
SELECT 
C.*,
S.SHIFT_SESSION_ID,
S.SHIFT_START_TS AS FINAL_SHIFT_START_TS,
S.SHIFT_SESSION_ID AS FINAL_SHIFT_SESSION_ID
FROM CLOSEST_SHIFT AS C
JOIN SELECTED_OPERATOR_SHIFTS AS S
ON C.LGNUM = S.LGNUM
AND C.CONFIRMED_BY = S.CONFIRMED_BY
--AND DATE(C.CONFIRMED_AT_TS) = S.WORK_DAY
AND C.CONFIRMED_AT_TS BETWEEN S.SHIFT_START_TS AND S.SHIFT_END_TS
),
SHIFT_ENRICHED AS (
  SELECT *,
    CASE 
      WHEN CONFIRMED_AT_TS < FINAL_SHIFT_START_TS THEN 'EARLY'
      WHEN CONFIRMED_AT_TS BETWEEN FINAL_SHIFT_START_TS AND DATEADD(HOUR,12,FINAL_SHIFT_START_TS) THEN 'ON_TIME'
      ELSE 'LATE'
    END AS SHIFT_ALIGNMENT,
  FROM UNIFIED_SHIFT_ASSIGNMENT
)
,
RANKED AS (
  SELECT *,
    ROW_NUMBER() OVER (
      PARTITION BY LGNUM, CONFIRMED_BY, FINAL_SHIFT_START_TS
      ORDER BY CONFIRMED_AT_TS, TANUM
    ) AS OPERATOR_TASK_RANK,
    LAG(CONFIRMED_AT_TS) OVER (
      PARTITION BY LGNUM, CONFIRMED_BY, FINAL_SHIFT_START_TS
      ORDER BY CONFIRMED_AT_TS, TANUM
    ) AS PREV_CONFIRMED_TS_IN_SHIFT
  FROM SHIFT_ENRICHED
),
FINAL AS (
  SELECT
    R.*,
    IP.MAX_TASK_DURATION,
   DATEDIFF(SECOND, STARTED_AT_TS, CONFIRMED_AT_TS) AS TIME_TAKEN_WH_TASK_IN_SEC,
    IFF(
      OPERATOR_TASK_RANK = 1,
      DATEDIFF(SECOND, SHIFT_START_TS, STARTED_AT_TS),
      DATEDIFF(SECOND, PREV_CONFIRMED_TS_IN_SHIFT, STARTED_AT_TS)
    ) AS WAITING_MOVING_TIME_IN_SEC,
    CASE
      WHEN OPERATOR_TASK_RANK = 1 THEN
        DATEDIFF(
          SECOND,
          CASE
            WHEN SHIFT_START_TS IS NOT NULL AND SHIFT_ALIGNMENT != 'EARLY' THEN SHIFT_START_TS
            WHEN DATE_PART(MINUTE, CONFIRMED_AT_TS) < 30 THEN DATE_TRUNC('HOUR', CONFIRMED_AT_TS)
            ELSE DATEADD(MINUTE, 30, DATE_TRUNC('HOUR', CONFIRMED_AT_TS))
          END,
          CONFIRMED_AT_TS
        )
      ELSE DATEDIFF(SECOND, PREV_CONFIRMED_TS_IN_SHIFT, CONFIRMED_AT_TS)
    END AS TIME_TAKEN_IN_SEC,
    IFF(
      TIME_TAKEN_IN_SEC <= COALESCE(MAX_TASK_DURATION * 60, 0),
      0,
      TIME_TAKEN_IN_SEC - COALESCE(MAX_TASK_DURATION * 60, 0)
    ) AS INDIRECT_TIME_IN_SEC
  FROM RANKED R
  LEFT JOIN INDIRECT_PARAMS IP
    ON R.LGNUM = IP.LGNUM AND R.CC_SOURCE_SYSTEM = IP.SRC_SYS
)
SELECT
  LGNUM AS WAREHOUSE_NUMBER,
  TANUM AS WAREHOUSE_TASK,
  PROCTY AS PROCESS_TYPE,
  TRART AS PROCESS_CATEGORY,
  DOCCAT AS DOCUMENT_CATEGORY,
  REASON AS MOVEMENT_REASON,
  DIRECTION,
  GUID_STOCK AS GUID_STOCK_ITEM,
  LETYP AS HANDLING_UNIT_TYPE,
  VLTYP AS SOURCE_STORAGE_TYPE,
  SLOC_TYPE AS LOCATION_TYPE,
  VLPLA AS SOURCE_STORAGE_BIN,
  NLTYP AS DEST_STORAGE_TYPE,
  DLOC_TYPE AS DEST_LOCATION_TYPE,
  NLPLA AS DEST_STORAGE_BIN,
  VLENR AS SOURCE_HU,
  NLENR AS DEST_HU,
  MATID AS PRODUCT_ID,
  MEINS AS BASE_UOM,
  WHO AS WAREHOUSE_ORDER,
  QUEUE,
  EXCCODE AS EXCEPTION_CODE,
  CONFIRMED_BY,
  CREATED_AT AS CREATED_TIMESTAMP,
  FINAL_SHIFT_START_TS,
  SHIFT_START_TS,
  OPERATOR_TASK_RANK,
  PRIORITY,
  SHIFT_ALIGNMENT,
  SHIFT_SESSION_ID,
  FINAL_SHIFT_SESSION_ID,
  SHIFT_END_TS,
  STARTED_AT AS STARTED_TIMESTAMP,
  CONFIRMED_AT AS CONFIRMED_TIMESTAMP,
  CONFIRMED_AT_WH AS CONFIRMED_WH_TIMESTAMP,
  CONFIRMED_DATE_WH,
  ACTUAL_QUANTITY,
  CREATED_DATE,
  STARTED_DATE,
  CONFIRMED_DATE,
  TIME_TAKEN_IN_SEC,
  TIME_TAKEN_WH_TASK_IN_SEC,
  WAITING_MOVING_TIME_IN_SEC,
  INDIRECT_TIME_IN_SEC,
      IFF(
      SOURCE_STORAGE_BIN = DEST_STORAGE_BIN, 
      0,
      IFF(
        LOCATION_TYPE = 'R' OR DEST_LOCATION_TYPE = 'R',
        0.5,
        1
      )
    ) AS HU_COUNT,
  CC_SOURCE_SYSTEM,
  CC_UPDATED_DATETIMESTAMP
FROM FINAL
--where confirmed_by = 'U35246' and confirmed_date_wh in ('2025-08-12','2025-08-13','2025-08-14','2025-08-15','2025-08-16')
where 
--warehouse_number = 'PA09' AND 
CONFIRMED_BY = 'C20976'
AND confirmed_date_wh >= '2025-08-01' AND confirmed_date_wh <= '2025-08-31' 
order by confirmed_timestamp, warehouse_task)


vs

create or replace view SC_LOG.INT_WMS.V_TD_GBL_SC_WMS_WAREHOUSE_TASK_5HR_V1(
	WAREHOUSE_NUMBER,
	WAREHOUSE_TASK,
	PROCESS_TYPE,
	PROCESS_CATEGORY,
	DOCUMENT_CATEGORY,
	MOVEMENT_REASON,
	DIRECTION,
	GUID_STOCK_ITEM,
	HANDLING_UNIT_TYPE,
	SOURCE_STORAGE_TYPE,
	LOCATION_TYPE,
	SOURCE_STORAGE_BIN,
	DEST_STORAGE_TYPE,
	DEST_LOCATION_TYPE,
	DEST_STORAGE_BIN,
	SOURCE_HU,
	DEST_HU,
	PRODUCT_ID,
	BASE_UOM,
	WAREHOUSE_ORDER,
	QUEUE,
	EXCEPTION_CODE,
	CONFIRMED_BY,
	CREATED_TIMESTAMP,
	SHIFT_START_TS,
	SHIFT_END_TS,
	SHIFT_SESSION_ID,
	OPERATOR_TASK_RANK,
	STARTED_TIMESTAMP,
	CONFIRMED_TIMESTAMP,
	CONFIRMED_WH_TIMESTAMP,
	CONFIRMED_DATE_WH,
	TIME_TAKEN_IN_SEC,
	TIME_TAKEN_WH_TASK_IN_SEC,
	WAITING_MOVING_TIME_IN_SEC,
	INDIRECT_TIME_IN_SEC,
	GAP_MINUTES,
	IS_NEW_SESSION,
	SESSION_SEQ,
	ACTUAL_QUANTITY,
	CC_SOURCE_SYSTEM,
	CC_UPDATED_DATETIMESTAMP
) as
WITH SHIFT_BASE AS (
  SELECT
    PA_FROM AS LGNUM,
    SRC_SYS,
    PA_TO AS SHIFT_START_RAW,
    ZCOMMENT AS TIMEZONE
  FROM SC_MD.INT_SC_MD.T_SC_PARAMETERS
  WHERE PROCESS = 'WMS' AND CATE = 'SHIFT_HR'
),
SHIFT_PARAMS AS (
  SELECT LGNUM, SRC_SYS, SHIFT_START_RAW, TIMEZONE, 'DAY' AS SHIFT_TYPE
  FROM SHIFT_BASE
  UNION ALL
  SELECT
    LGNUM,
    SRC_SYS,
    TO_CHAR(TIMEADD('HOUR', 12, TO_TIME(SHIFT_START_RAW)), 'HH24:MI') AS SHIFT_START_RAW,
    TIMEZONE,
    'NIGHT' AS SHIFT_TYPE
  FROM SHIFT_BASE
),
INDIRECT_PARAMS AS (
  SELECT PA_FROM AS LGNUM, SRC_SYS, PA_TO::INT AS MAX_TASK_DURATION
  FROM SC_MD.INT_SC_MD.T_SC_PARAMETERS
  WHERE PROCESS = 'WMS' AND CATE = 'IND_TIME'
),
BASE AS (
  SELECT
    'NA' AS CC_SOURCE_SYSTEM,
    LGNUM, TANUM, PROCTY, TRART, DOCCAT, REASON,
    GUID_STOCK, LETYP, VLTYP, SLOC_TYPE, VLPLA,
    NLTYP, DLOC_TYPE, NLPLA, VLENR, NLENR,
    MATID, MEINS, WHO, QUEUE, EXCCODE, CONFIRMED_BY,
    CREATED_AT, STARTED_AT, CONFIRMED_AT, CONFIRMED_AT_WH,
    NISTM
  FROM EWM_S4_NA_PROD_DATASHARE.STAGING."/SCWM/ORDIM_C"
  WHERE TOSTAT = 'C' AND TRART IN (1,2,3,4)
),
T_TIMES AS (
  SELECT
    R.*,
    SP.TIMEZONE,
    CONVERT_TIMEZONE('UTC', SP.TIMEZONE, TRY_TO_TIMESTAMP(TO_VARCHAR(R.STARTED_AT),   'YYYYMMDDHH24MISS'))::TIMESTAMP_NTZ AS STARTED_AT_TS,
    CONVERT_TIMEZONE('UTC', SP.TIMEZONE, TRY_TO_TIMESTAMP(TO_VARCHAR(R.CONFIRMED_AT), 'YYYYMMDDHH24MISS'))::TIMESTAMP_NTZ AS CONFIRMED_AT_TS,
    CAST(CONVERT_TIMEZONE('UTC', SP.TIMEZONE, TRY_TO_TIMESTAMP(TO_VARCHAR(R.CONFIRMED_AT),'YYYYMMDDHH24MISS')) AS DATE) AS CONFIRMED_LOCAL_DATE,
    TRY_TO_DATE(LEFT(R.CONFIRMED_AT_WH, 8), 'YYYYMMDD') AS CONFIRMED_DATE_WH,
    COALESCE(
      CONVERT_TIMEZONE('UTC', SP.TIMEZONE, TRY_TO_TIMESTAMP(TO_VARCHAR(R.STARTED_AT),   'YYYYMMDDHH24MISS'))::TIMESTAMP_NTZ,
      CONVERT_TIMEZONE('UTC', SP.TIMEZONE, TRY_TO_TIMESTAMP(TO_VARCHAR(R.CONFIRMED_AT), 'YYYYMMDDHH24MISS'))::TIMESTAMP_NTZ
    ) AS ORDER_TS,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CC_UPDATED_DATETIMESTAMP,
    SUM(R.NISTM) OVER (PARTITION BY R.TANUM) AS ACTUAL_QUANTITY
  FROM BASE R
  JOIN (SELECT DISTINCT LGNUM, SRC_SYS, TIMEZONE FROM SHIFT_BASE) SP
    ON SP.LGNUM = R.LGNUM AND SP.SRC_SYS = R.CC_SOURCE_SYSTEM
),
OFFSETS AS (SELECT -1 AS off UNION ALL SELECT 0 UNION ALL SELECT 1),
SHIFT_CHOICES AS (
  SELECT
    T.*,
    P.SHIFT_TYPE,
    P.SHIFT_START_RAW,
    TO_TIMESTAMP_NTZ(
      TO_CHAR(DATEADD(DAY, O.off, T.CONFIRMED_LOCAL_DATE), 'YYYY-MM-DD') || ' ' || P.SHIFT_START_RAW,
      'YYYY-MM-DD HH24:MI'
    ) AS SHIFT_START_TS_CAND,
    ABS(DATEDIFF('minute', T.CONFIRMED_AT_TS, TO_TIMESTAMP_NTZ(
      TO_CHAR(DATEADD(DAY, O.off, T.CONFIRMED_LOCAL_DATE), 'YYYY-MM-DD') || ' ' || P.SHIFT_START_RAW,
      'YYYY-MM-DD HH24:MI'
    ))) AS SHIFT_DIFF_MIN
  FROM T_TIMES T
  JOIN SHIFT_PARAMS P
    ON P.LGNUM = T.LGNUM AND P.SRC_SYS = T.CC_SOURCE_SYSTEM
  JOIN OFFSETS O ON TRUE
),
PICKED_SHIFT AS (
  SELECT *
  FROM (
    SELECT
      S.*,
      ROW_NUMBER() OVER (PARTITION BY S.LGNUM, S.TANUM ORDER BY S.SHIFT_DIFF_MIN ASC) AS RN
    FROM SHIFT_CHOICES S
  )
  WHERE RN = 1
),
SESSIONIZE AS (
  SELECT
    P.*,
    LAG(P.CONFIRMED_AT_TS) OVER (
      PARTITION BY P.LGNUM, P.CONFIRMED_BY
      ORDER BY P.ORDER_TS, P.CONFIRMED_AT_TS, P.TANUM
    ) AS PREV_CONFIRMED_AT_TS,
    ROW_NUMBER() OVER (
      PARTITION BY P.LGNUM, P.CONFIRMED_BY
      ORDER BY P.ORDER_TS, P.CONFIRMED_AT_TS, P.TANUM
    ) AS OPERATOR_ROW_NUM
  FROM PICKED_SHIFT P
),
SESSIONIZED AS (
  SELECT
    S.*,
    DATEDIFF('minute', S.PREV_CONFIRMED_AT_TS, S.CONFIRMED_AT_TS) AS GAP_MINUTES,
    IFF(
      S.PREV_CONFIRMED_AT_TS IS NULL OR DATEDIFF('minute', S.PREV_CONFIRMED_AT_TS, S.CONFIRMED_AT_TS) > 240,
      1, 0
    ) AS IS_NEW_SESSION
  FROM SESSIONIZE S
),
SESSION_IDS AS (
  SELECT
    X.*,
    SUM(IS_NEW_SESSION) OVER (
      PARTITION BY X.LGNUM, X.CONFIRMED_BY
      ORDER BY X.ORDER_TS, X.CONFIRMED_AT_TS, X.TANUM
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS SESSION_SEQ
  FROM SESSIONIZED X
),
SESSION_ENRICH AS (
  SELECT
    S.*,
    FIRST_VALUE(S.SHIFT_START_TS_CAND) OVER (
      PARTITION BY S.LGNUM, S.CONFIRMED_BY, S.SESSION_SEQ
      ORDER BY S.ORDER_TS, S.CONFIRMED_AT_TS, S.TANUM
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
    ) AS SESSION_FIRST_SHIFT_START_TS,
    FIRST_VALUE(S.CONFIRMED_AT_TS) OVER (
      PARTITION BY S.LGNUM, S.CONFIRMED_BY, S.SESSION_SEQ
      ORDER BY S.ORDER_TS, S.CONFIRMED_AT_TS, S.TANUM
      ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
    ) AS SESSION_FIRST_CONFIRMED_AT_TS,
    ROW_NUMBER() OVER (
      PARTITION BY S.LGNUM, S.CONFIRMED_BY, S.SESSION_SEQ
      ORDER BY S.ORDER_TS, S.CONFIRMED_AT_TS, S.TANUM
    ) AS SESSION_ROW_NUM
  FROM SESSION_IDS S
),
FINAL AS (
  SELECT
    F.LGNUM AS WAREHOUSE_NUMBER,
    F.TANUM AS WAREHOUSE_TASK,
    F.PROCTY AS PROCESS_TYPE,
    F.TRART AS PROCESS_CATEGORY,
    F.DOCCAT AS DOCUMENT_CATEGORY,
    F.REASON AS MOVEMENT_REASON,
    CASE
    WHEN F.PROCTY = '3030' THEN 'REPLENISHMENT'
      WHEN F.PROCTY LIKE '1%' THEN 'INBOUND'
      WHEN F.PROCTY LIKE '2%' THEN 'OUTBOUND' 
      WHEN F.TRART = '4' then 'INVENTORY'
      ELSE 'INTERNAL'
    END AS DIRECTION,
    F.GUID_STOCK AS GUID_STOCK_ITEM,
    F.LETYP AS HANDLING_UNIT_TYPE,
    F.VLTYP AS SOURCE_STORAGE_TYPE,
    F.SLOC_TYPE AS LOCATION_TYPE,
    F.VLPLA AS SOURCE_STORAGE_BIN,
    F.NLTYP AS DEST_STORAGE_TYPE,
    F.DLOC_TYPE AS DEST_LOCATION_TYPE,
    F.NLPLA AS DEST_STORAGE_BIN,
    F.VLENR AS SOURCE_HU,
    F.NLENR AS DEST_HU,
    F.MATID AS PRODUCT_ID,
    F.MEINS AS BASE_UOM,
    F.WHO AS WAREHOUSE_ORDER,
    F.QUEUE,
    F.EXCCODE AS EXCEPTION_CODE,
    F.CONFIRMED_BY,
    F.CREATED_AT AS CREATED_TIMESTAMP,

    F.SHIFT_START_TS_CAND AS SHIFT_START_TS,
    DATEADD('HOUR', 12, F.SHIFT_START_TS_CAND) AS SHIFT_END_TS,

    F.LGNUM || '-' || F.CONFIRMED_BY || '-' ||
      TO_CHAR(F.SESSION_FIRST_CONFIRMED_AT_TS, 'YYYY-MM-DD"T"HH24:MI') || '-' ||
      LPAD(F.SESSION_SEQ::STRING, 4, '0') AS SHIFT_SESSION_ID,

    F.OPERATOR_ROW_NUM AS OPERATOR_TASK_RANK,

    TO_CHAR(F.STARTED_AT_TS,   'YYYYMMDDHH24MISS') AS STARTED_TIMESTAMP,
    F.CONFIRMED_AT AS CONFIRMED_TIMESTAMP,
    TO_CHAR(F.CONFIRMED_AT_TS, 'YYYYMMDDHH24MISS') AS CONFIRMED_WH_TIMESTAMP,
    F.CONFIRMED_DATE_WH,

    -- Time taken rule:
    -- If first record of session:
    --   - If confirm hour == shift start hour: seconds between shift start and confirm
    --   - Else: seconds since top-of-hour if <30, else since hh:30
    -- Else: seconds since previous confirm
    CASE
      WHEN F.SESSION_ROW_NUM = 1 THEN
        CASE
          WHEN F.SHIFT_START_TS_CAND IS NOT NULL
           AND DATE_PART('HOUR', F.CONFIRMED_AT_TS) = DATE_PART('HOUR', F.SHIFT_START_TS_CAND)
          THEN ABS(DATEDIFF('SECOND', F.SHIFT_START_TS_CAND, F.CONFIRMED_AT_TS))
          WHEN DATE_PART('MINUTE', F.CONFIRMED_AT_TS) < 30
          THEN DATEDIFF('SECOND', DATE_TRUNC('HOUR', F.CONFIRMED_AT_TS), F.CONFIRMED_AT_TS)
          ELSE DATEDIFF('SECOND', DATEADD('MINUTE', 30, DATE_TRUNC('HOUR', F.CONFIRMED_AT_TS)), F.CONFIRMED_AT_TS)
        END
      ELSE
        IFF(F.PREV_CONFIRMED_AT_TS IS NOT NULL,
            DATEDIFF('SECOND', F.PREV_CONFIRMED_AT_TS, F.CONFIRMED_AT_TS),
            0)
    END AS TIME_TAKEN_IN_SEC,
   DATEDIFF(SECOND, STARTED_AT_TS, CONFIRMED_AT_TS) AS TIME_TAKEN_WH_TASK_IN_SEC,
    IFF(
      OPERATOR_TASK_RANK = 1,
      DATEDIFF(SECOND, SHIFT_START_TS_CAND, STARTED_AT_TS),
      DATEDIFF(SECOND, PREV_CONFIRMED_AT_TS, STARTED_AT_TS)
    ) AS WAITING_MOVING_TIME_IN_SEC,
    IFF(
      TIME_TAKEN_IN_SEC <= COALESCE(MAX_TASK_DURATION * 60, 0),
      0,
      TIME_TAKEN_IN_SEC - COALESCE(MAX_TASK_DURATION * 60, 0)
    ) AS INDIRECT_TIME_IN_SEC,
    F.GAP_MINUTES,
    F.IS_NEW_SESSION,
    F.SESSION_SEQ,

    F.ACTUAL_QUANTITY,
    'NA' AS CC_SOURCE_SYSTEM,
    F.CC_UPDATED_DATETIMESTAMP
  FROM SESSION_ENRICH F
  LEFT JOIN INDIRECT_PARAMS IP
    ON F.LGNUM = IP.LGNUM AND F.CC_SOURCE_SYSTEM = IP.SRC_SYS
)
SELECT *
FROM FINAL;


is there any change in the caluculation for the KPI in both the views




