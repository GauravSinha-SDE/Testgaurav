WITH TIMEZONE_PARAMS AS (
  SELECT DISTINCT
    PA_FROM AS LGNUM,
    SRC_SYS,
    CASE
      WHEN REGEXP_LIKE(UPPER(ZCOMMENT), '^UTC[+-]\\d{1,2}(:\\d{2})?$') THEN
        SUBSTR(REPLACE(UPPER(ZCOMMENT), 'UTC', ''), 1, 1) ||
        LPAD(SUBSTR(SPLIT_PART(REPLACE(UPPER(ZCOMMENT), 'UTC', ''), ':', 1), 2), 2, '0') || ':' ||
        LPAD(IFF(POSITION(':' IN REPLACE(UPPER(ZCOMMENT), 'UTC', '')) > 0,
                 SPLIT_PART(REPLACE(UPPER(ZCOMMENT), 'UTC', ''), ':', 2),
                 '00'), 2, '0')
      ELSE ZCOMMENT
    END AS ZCOMMENT
  FROM SC_MD.INT_SC_MD.T_SC_PARAMETERS
  WHERE PROCESS = 'WMS' AND CATE = 'SHIFT_HR'
),
SHIFT_PARAMS AS (
  SELECT DISTINCT
    PA_FROM AS LGNUM,
    SRC_SYS,
    PA_TO AS SHIFT_START_RAW,
    CASE 
      WHEN TO_TIME(PA_TO) BETWEEN TO_TIME('05:00') AND TO_TIME('12:00') THEN 'DAY'
      WHEN TO_TIME(PA_TO) BETWEEN TO_TIME('17:00') AND TO_TIME('23:59') THEN 'NIGHT'
      ELSE 'UNKNOWN'
    END AS SHIFT_TYPE
  FROM SC_MD.INT_SC_MD.T_SC_PARAMETERS
  WHERE PROCESS = 'WMS' AND CATE = 'SHIFT_HR'
),
/* Collapse to one row per warehouse with day & night start times */
SHIFT_BOUNDARIES AS (
  SELECT
    LGNUM,
    SRC_SYS,
    MAX(CASE WHEN SHIFT_TYPE = 'DAY' THEN SHIFT_START_RAW END)   AS DAY_START_RAW,
    MAX(CASE WHEN SHIFT_TYPE = 'NIGHT' THEN SHIFT_START_RAW END) AS NIGHT_START_RAW
  FROM SHIFT_PARAMS
  GROUP BY LGNUM, SRC_SYS
),
INDIRECT_PARAMS AS (
  SELECT DISTINCT PA_FROM AS LGNUM, SRC_SYS, PA_TO::INT AS MAX_TASK_DURATION
  FROM SC_MD.INT_SC_MD.T_SC_PARAMETERS
  WHERE PROCESS = 'WMS' AND CATE = 'IND_TIME'
),
BASE AS (
  SELECT 
    'NA' AS CC_SOURCE_SYSTEM,
    LGNUM, TANUM, PROCTY, TRART, DOCCAT, REASON,
    GUID_STOCK, LETYP, VLTYP, SLOC_TYPE, VLPLA,
    NLTYP, DLOC_TYPE, NLPLA, VLENR, NLENR,
    MATID, MEINS, WHO, QUEUE, EXCCODE, CONFIRMED_BY,
    CREATED_AT, STARTED_AT, CONFIRMED_AT, CONFIRMED_AT_WH,
    NISTM
  FROM EWM_S4_NA_PROD_DATASHARE.STAGING."/SCWM/ORDIM_C"
  WHERE TOSTAT = 'C' AND TRART IN (1,2,3,4)
),
TRANSFORMED AS (
  SELECT
    R.*,
    TZ.ZCOMMENT,
    CASE
      WHEN R.PROCTY = '3030' THEN 'REPLENISHMENT'
      WHEN R.PROCTY LIKE '1%' THEN 'INBOUND'
      WHEN R.PROCTY LIKE '2%' THEN 'OUTBOUND'
      ELSE 'OTHERS'
    END AS DIRECTION,
    TRY_TO_DATE(LEFT(R.CREATED_AT,8),'YYYYMMDD') AS CREATED_DATE,
    TRY_TO_DATE(LEFT(R.STARTED_AT,8),'YYYYMMDD') AS STARTED_DATE,
    TRY_TO_DATE(LEFT(R.CONFIRMED_AT,8),'YYYYMMDD') AS CONFIRMED_DATE,
    /* Convert UTC to local warehouse time */
    CONVERT_TIMEZONE('UTC', TZ.ZCOMMENT, TRY_TO_TIMESTAMP(TO_VARCHAR(R.CONFIRMED_AT_WH),'YYYYMMDDHH24MISS'))::TIMESTAMP_NTZ AS CONFIRMED_AT_TS,
    CONVERT_TIMEZONE('UTC', TZ.ZCOMMENT, TRY_TO_TIMESTAMP(TO_VARCHAR(R.STARTED_AT),'YYYYMMDDHH24MISS'))::TIMESTAMP_NTZ AS STARTED_AT_TS,
    CAST(CONVERT_TIMEZONE('UTC', TZ.ZCOMMENT, TRY_TO_TIMESTAMP(TO_VARCHAR(R.CONFIRMED_AT_WH),'YYYYMMDDHH24MISS')) AS DATE) AS CONFIRMED_DATE_WH,
    CURRENT_TIMESTAMP()::TIMESTAMP_NTZ AS CC_UPDATED_DATETIMESTAMP,
    SUM(R.NISTM) OVER (PARTITION BY R.TANUM) AS ACTUAL_QUANTITY
  FROM BASE R
  JOIN TIMEZONE_PARAMS TZ
    ON R.LGNUM = TZ.LGNUM AND R.CC_SOURCE_SYSTEM = TZ.SRC_SYS
),
/* Deterministic shift assignment: no cross-join, no ambiguity */
ASSIGNED_SHIFT AS (
  SELECT
    T.*,
    B.DAY_START_RAW,
    B.NIGHT_START_RAW,
    /* Build day shift window for the local date */
    TO_TIMESTAMP(TO_CHAR(T.CONFIRMED_AT_TS::DATE, 'YYYY-MM-DD') || ' ' || B.DAY_START_RAW, 'YYYY-MM-DD HH24:MI')::TIMESTAMP_NTZ AS DAY_START_TS,
    DATEADD(HOUR, 12, TO_TIMESTAMP(TO_CHAR(T.CONFIRMED_AT_TS::DATE, 'YYYY-MM-DD') || ' ' || B.DAY_START_RAW, 'YYYY-MM-DD HH24:MI')::TIMESTAMP_NTZ) AS DAY_END_TS,
    /* Night shift: choose today's night start if after start, else previous day's night start */
    IFF(
      T.CONFIRMED_AT_TS >= TO_TIMESTAMP(TO_CHAR(T.CONFIRMED_AT_TS::DATE, 'YYYY-MM-DD') || ' ' || B.NIGHT_START_RAW, 'YYYY-MM-DD HH24:MI')::TIMESTAMP_NTZ,
      TO_TIMESTAMP(TO_CHAR(T.CONFIRMED_AT_TS::DATE, 'YYYY-MM-DD') || ' ' || B.NIGHT_START_RAW, 'YYYY-MM-DD HH24:MI')::TIMESTAMP_NTZ,
      DATEADD(DAY, -1, TO_TIMESTAMP(TO_CHAR(T.CONFIRMED_AT_TS::DATE, 'YYYY-MM-DD') || ' ' || B.NIGHT_START_RAW, 'YYYY-MM-DD HH24:MI')::TIMESTAMP_NTZ)
    ) AS NIGHT_START_TS
  FROM TRANSFORMED T
  JOIN SHIFT_BOUNDARIES B
    ON T.LGNUM = B.LGNUM AND T.CC_SOURCE_SYSTEM = B.SRC_SYS
),
SHIFT_ENRICHED AS (
  SELECT
    A.*,
    DATEADD(HOUR, 12, NIGHT_START_TS) AS NIGHT_END_TS,
    /* Decide final shift based on containment in windows, using half-open intervals [start, end) */
    IFF(CONFIRMED_AT_TS >= DAY_START_TS AND CONFIRMED_AT_TS < DAY_END_TS, DAY_START_TS, NIGHT_START_TS) AS FINAL_SHIFT_START_TS,
    IFF(CONFIRMED_AT_TS >= DAY_START_TS AND CONFIRMED_AT_TS < DAY_END_TS, 'DAY', 'NIGHT') AS FINAL_SHIFT_TYPE
  FROM ASSIGNED_SHIFT A
),
SHIFT_FINAL AS (
  SELECT
    S.*,
    DATEADD(HOUR, 12, FINAL_SHIFT_START_TS) AS SHIFT_END_TS,
    /* For readability, also expose chosen start as SHIFT_START_TS */
    FINAL_SHIFT_START_TS AS SHIFT_START_TS,
    /* Priority is always 1 now (unambiguous) */
    1 AS PRIORITY,
    CONCAT(LGNUM, '-', CONFIRMED_BY, '-', TO_CHAR(FINAL_SHIFT_START_TS, 'YYYY-MM-DD"T"HH24:MI')) AS SHIFT_SESSION_ID,
    CASE 
      WHEN CONFIRMED_AT_TS < FINAL_SHIFT_START_TS THEN 'EARLY'
      WHEN CONFIRMED_AT_TS >= FINAL_SHIFT_START_TS AND CONFIRMED_AT_TS < DATEADD(HOUR, 12, FINAL_SHIFT_START_TS) THEN 'ON_TIME'
      ELSE 'LATE'
    END AS SHIFT_ALIGNMENT
  FROM SHIFT_ENRICHED S
),
RANKED AS (
  SELECT
    SF.*,
    ROW_NUMBER() OVER (
      PARTITION BY LGNUM, CONFIRMED_BY, FINAL_SHIFT_START_TS
      ORDER BY CONFIRMED_AT_TS, TANUM
    ) AS OPERATOR_TASK_RANK,
    LAG(CONFIRMED_AT_TS) OVER (
      PARTITION BY LGNUM, CONFIRMED_BY, FINAL_SHIFT_START_TS
      ORDER BY CONFIRMED_AT_TS, TANUM
    ) AS PREV_CONFIRMED_TS_IN_SHIFT
  FROM SHIFT_FINAL SF
),
FINAL AS (
  SELECT
    R.*,
    IP.MAX_TASK_DURATION,
    DATEDIFF(SECOND, STARTED_AT_TS, CONFIRMED_AT_TS) AS TIME_TAKEN_WH_TASK_IN_SEC,
    CASE
      WHEN OPERATOR_TASK_RANK = 1
        THEN GREATEST(DATEDIFF(SECOND, SHIFT_START_TS, STARTED_AT_TS), 0)
      ELSE DATEDIFF(SECOND, PREV_CONFIRMED_TS_IN_SHIFT, STARTED_AT_TS)
    END AS WAITING_MOVING_TIME_IN_SEC,
    CASE
      WHEN OPERATOR_TASK_RANK = 1
        THEN GREATEST(DATEDIFF(SECOND, SHIFT_START_TS, CONFIRMED_AT_TS), 0)
      ELSE DATEDIFF(SECOND, PREV_CONFIRMED_TS_IN_SHIFT, CONFIRMED_AT_TS)
    END AS TIME_TAKEN_IN_SEC,
    IFF(
      TIME_TAKEN_IN_SEC <= COALESCE(MAX_TASK_DURATION * 60, 0),
      0,
      TIME_TAKEN_IN_SEC - COALESCE(MAX_TASK_DURATION * 60, 0)
    ) AS INDIRECT_TIME_IN_SEC
  FROM RANKED R
  LEFT JOIN INDIRECT_PARAMS IP
    ON R.LGNUM = IP.LGNUM AND R.CC_SOURCE_SYSTEM = IP.SRC_SYS
)
SELECT
  LGNUM AS WAREHOUSE_NUMBER,
  TANUM AS WAREHOUSE_TASK,
  PROCTY AS PROCESS_TYPE,
  TRART AS PROCESS_CATEGORY,
  DOCCAT AS DOCUMENT_CATEGORY,
  REASON AS MOVEMENT_REASON,
  DIRECTION,
  GUID_STOCK AS GUID_STOCK_ITEM,
  LETYP AS HANDLING_UNIT_TYPE,
  VLTYP AS SOURCE_STORAGE_TYPE,
  SLOC_TYPE AS LOCATION_TYPE,
  VLPLA AS SOURCE_STORAGE_BIN,
  NLTYP AS DEST_STORAGE_TYPE,
  DLOC_TYPE AS DEST_LOCATION_TYPE,
  NLPLA AS DEST_STORAGE_BIN,
  VLENR AS SOURCE_HU,
  NLENR AS DEST_HU,
  MATID AS PRODUCT_ID,
  MEINS AS BASE_UOM,
  WHO AS WAREHOUSE_ORDER,
  QUEUE,
  EXCCODE AS EXCEPTION_CODE,
  CONFIRMED_BY,
  CREATED_AT AS CREATED_TIMESTAMP,
  FINAL_SHIFT_START_TS,
  SHIFT_START_TS,
  OPERATOR_TASK_RANK,
  PRIORITY,
  SHIFT_ALIGNMENT,
  SHIFT_SESSION_ID,
  DATEADD(HOUR, 12, FINAL_SHIFT_START_TS) AS SHIFT_END_TS,
  STARTED_AT AS STARTED_TIMESTAMP,
  CONFIRMED_AT AS CONFIRMED_TIMESTAMP,
  CONFIRMED_AT_WH AS CONFIRMED_WH_TIMESTAMP,
  CONFIRMED_DATE_WH,
  ACTUAL_QUANTITY,
  CREATED_DATE,
  STARTED_DATE,
  CONFIRMED_DATE,
  TIME_TAKEN_IN_SEC,
  TIME_TAKEN_WH_TASK_IN_SEC,
  WAITING_MOVING_TIME_IN_SEC,
  INDIRECT_TIME_IN_SEC,
  IFF(
    SOURCE_STORAGE_BIN = DEST_STORAGE_BIN, 
    0,
    IFF(
      LOCATION_TYPE = 'R' OR DEST_LOCATION_TYPE = 'R',
      0.5,
      1
    )
  ) AS HU_COUNT,
  CC_SOURCE_SYSTEM,
  CC_UPDATED_DATETIMESTAMP
FROM FINAL
WHERE 
  CONFIRMED_BY = 'C20976'
  AND CONFIRMED_DATE_WH >= DATE('2025-08-01') 
  AND CONFIRMED_DATE_WH <= DATE('2025-08-31')
ORDER BY CONFIRMED_TIMESTAMP, WAREHOUSE_TASK;
